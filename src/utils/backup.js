const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const config = require('../../config/config');
const schedule = require('node-schedule');

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
class BackupManager {
  constructor() {
    this.bot = new TelegramBot(config.BOT_TOKEN);
    this.backupDir = path.join(__dirname, '../../backups');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(this.backupDir)) {
      fs.mkdirSync(this.backupDir, { recursive: true });
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
   * @param {string} cronSchedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ cron-—Ñ–æ—Ä–º–∞—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00)
   */
  scheduleBackup(cronSchedule = '0 3 * * *') {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    schedule.scheduleJob(cronSchedule, () => {
      this.createAndSendBackup()
        .then(() => console.log(`–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${new Date()}`))
        .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', err));
    });
    
    console.log(`–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: ${cronSchedule}`);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @returns {Promise<void>}
   */
  async createAndSendBackup() {
    try {
      // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
      const date = new Date();
      const filename = `backup_${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}.db`;
      const backupPath = path.join(this.backupDir, filename);

      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dbPath = path.resolve(config.DB_PATH);
      fs.copyFileSync(dbPath, backupPath);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (config.AUTHORIZED_USER_ID) {
        await this.bot.sendDocument(
          config.AUTHORIZED_USER_ID, 
          backupPath, 
          { 
            caption: 'üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ.' 
          }
        );
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
      this.cleanupOldBackups();

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7
   */
  cleanupOldBackups() {
    try {
      const files = fs.readdirSync(this.backupDir)
        .filter(file => file.startsWith('backup_') && file.endsWith('.db'))
        .map(file => ({
          name: file,
          path: path.join(this.backupDir, file),
          time: fs.statSync(path.join(this.backupDir, file)).mtime.getTime()
        }))
        .sort((a, b) => b.time - a.time); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7
      if (files.length > 7) {
        files.slice(7).forEach(file => {
          fs.unlinkSync(file.path);
          console.log(`–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${file.name}`);
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', error);
    }
  }
}

module.exports = new BackupManager(); 