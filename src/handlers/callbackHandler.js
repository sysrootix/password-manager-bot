const { v4: uuidv4 } = require('uuid');
const keyboards = require('../utils/keyboards');
const sessionManager = require('../utils/sessionManager');
const db = require('../db/database');
const crypto = require('../utils/crypto');
const passwordGenerator = require('../utils/passwordGenerator');
const config = require('../../config/config');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {Object} callbackQuery - –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
 */
module.exports = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (config.AUTHORIZED_USER_ID && userId.toString() !== config.AUTHORIZED_USER_ID) {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É',
      show_alert: true
    });
    return;
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ callback –∑–∞–ø—Ä–æ—Å–∞–º–∏
  try {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (data === 'back_to_main') {
      await backToMain(bot, chatId, messageId);
      sessionManager.setState(userId, sessionManager.STATES.IDLE);
      sessionManager.resetPasswordData(userId);
    }
    // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    else if (data === 'view_categories') {
      await showCategories(bot, chatId, messageId);
    }
    // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    else if (data.startsWith('category_')) {
      const category = data.split('_')[1];
      await showServices(bot, chatId, messageId, category);
    }
    // –í—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞
    else if (data.startsWith('service_')) {
      const id = data.split('_')[1];
      await showPasswordDetails(bot, chatId, messageId, id);
    }
    // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ URL
    else if (data === 'skip_url') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π URL
      sessionManager.setPasswordData(userId, { url: '' });
      sessionManager.setState(userId, sessionManager.STATES.AWAITING_PASSWORD_CHOICE);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
      await bot.editMessageText(
        'üìù *–®–∞–≥ 5/5:* –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:',
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: keyboards.passwordChoiceKeyboard()
        }
      );
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    else if (data === 'add_password') {
      await startAddPassword(bot, chatId, messageId, userId);
    }
    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
    else if (data === 'password_generator') {
      await showPasswordGenerator(bot, chatId, messageId, userId);
    }
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    else if (data === 'settings') {
      await showSettings(bot, chatId, messageId);
    }
    // –í—ã–±–æ—Ä –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
    else if (data === 'length_12') {
      await showPasswordLengthOptions(bot, chatId, messageId);
    }
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
    else if (data.startsWith('set_length_')) {
      const length = parseInt(data.split('_')[2]);
      sessionManager.setGeneratorSettings(userId, { length });
      await updatePasswordGeneratorSettings(bot, chatId, messageId, userId);
    }
    // –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
    else if (data === 'toggle_uppercase') {
      const settings = sessionManager.getGeneratorSettings(userId);
      sessionManager.setGeneratorSettings(userId, { uppercase: !settings.uppercase });
      await updatePasswordGeneratorSettings(bot, chatId, messageId, userId);
    }
    // –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ü–∏—Ñ—Ä
    else if (data === 'toggle_numbers') {
      const settings = sessionManager.getGeneratorSettings(userId);
      sessionManager.setGeneratorSettings(userId, { numbers: !settings.numbers });
      await updatePasswordGeneratorSettings(bot, chatId, messageId, userId);
    }
    // –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    else if (data === 'toggle_symbols') {
      const settings = sessionManager.getGeneratorSettings(userId);
      sessionManager.setGeneratorSettings(userId, { symbols: !settings.symbols });
      await updatePasswordGeneratorSettings(bot, chatId, messageId, userId);
    }
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    else if (data === 'generate') {
      const settings = sessionManager.getGeneratorSettings(userId);
      const password = passwordGenerator.generatePassword(settings);
      
      await bot.editMessageText(
        `üîê *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:*\n\n\`${password}\`\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –µ–≥–æ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.`,
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π', callback_data: 'generate' }],
              [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'password_generator' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
          }
        }
      );
    }
    // –í—ã–±–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
    else if (data === 'generate_password') {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
      sessionManager.setState(userId, sessionManager.STATES.AWAITING_PASSWORD_LENGTH);
      
      await bot.editMessageText(
        'üî¢ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª–∏–Ω–æ–π 16 —Å–∏–º–≤–æ–ª–æ–≤):',
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîü 10', callback_data: 'password_length_10' }],
              [{ text: '1Ô∏è‚É£2Ô∏è‚É£ 12', callback_data: 'password_length_12' }],
              [{ text: '1Ô∏è‚É£6Ô∏è‚É£ 16 (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é)', callback_data: 'password_length_16' }],
              [{ text: '2Ô∏è‚É£0Ô∏è‚É£ 20', callback_data: 'password_length_20' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'add_password' }]
            ]
          }
        }
      );
    }
    // –í—ã–±–æ—Ä –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
    else if (data.startsWith('password_length_')) {
      const length = parseInt(data.split('_')[2]);
      const settings = sessionManager.getGeneratorSettings(userId);
      settings.length = length;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏–Ω–æ–π
      const password = passwordGenerator.generatePassword(settings);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      sessionManager.setPasswordData(userId, { password });
      sessionManager.setState(userId, sessionManager.STATES.CONFIRM_SAVE);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const passwordData = sessionManager.getPasswordData(userId);
      
      const urlText = passwordData.url ? `\n*URL:* ${passwordData.url}` : '';
      await bot.editMessageText(
        `üìù *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${passwordData.category}\n*–°–µ—Ä–≤–∏—Å:* ${passwordData.service}\n*–õ–æ–≥–∏–Ω:* ${passwordData.login}${urlText}\n*–ü–∞—Ä–æ–ª—å:* \`${passwordData.password}\`\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?`,
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: keyboards.saveKeyboard()
        }
      );
    }
    // –í—ã–±–æ—Ä –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –≤—Ä—É—á–Ω—É—é
    else if (data === 'enter_password') {
      sessionManager.setState(userId, sessionManager.STATES.AWAITING_PASSWORD);
      
      await bot.editMessageText(
        'üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:',
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'add_password' }]
            ]
          }
        }
      );
    }
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    else if (data === 'save_password') {
      const passwordData = sessionManager.getPasswordData(userId);
      const editingId = sessionManager.getEditingId(userId);
      
      if (editingId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        const encryptedPassword = crypto.encrypt(passwordData.password);
        await db.updatePassword(
          editingId,
          passwordData.category,
          passwordData.service,
          passwordData.login,
          encryptedPassword,
          passwordData.url
        );
        
        await bot.editMessageText(
          '‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìÅ –ö —Å–ø–∏—Å–∫—É –ø–∞—Ä–æ–ª–µ–π', callback_data: 'view_categories' }],
                [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
              ]
            }
          }
        );
      } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        const id = uuidv4();
        const encryptedPassword = crypto.encrypt(passwordData.password);
        
        await db.addPassword(
          id,
          passwordData.category,
          passwordData.service,
          passwordData.login,
          encryptedPassword,
          passwordData.url
        );
        
        await bot.editMessageText(
          '‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!',
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìÅ –ö —Å–ø–∏—Å–∫—É –ø–∞—Ä–æ–ª–µ–π', callback_data: 'view_categories' }],
                [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
              ]
            }
          }
        );
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      sessionManager.setState(userId, sessionManager.STATES.IDLE);
      sessionManager.resetPasswordData(userId);
    }
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    else if (data.startsWith('edit_')) {
      if (data === 'edit_category') {
        sessionManager.setState(userId, sessionManager.STATES.EDITING_CATEGORY);
        await bot.editMessageText(
          '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_edit' }]
              ]
            }
          }
        );
        return;
      } else if (data === 'edit_service') {
        sessionManager.setState(userId, sessionManager.STATES.EDITING_SERVICE);
        await bot.editMessageText(
          '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:',
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_edit' }]
              ]
            }
          }
        );
        return;
      } else if (data === 'edit_login') {
        sessionManager.setState(userId, sessionManager.STATES.EDITING_LOGIN);
        await bot.editMessageText(
          '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:',
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_edit' }]
              ]
            }
          }
        );
        return;
      } else if (data === 'edit_password') {
        sessionManager.setState(userId, sessionManager.STATES.EDITING_PASSWORD);
        await bot.editMessageText(
          '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:',
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_edit' }]
              ]
            }
          }
        );
        return;
      } else if (data === 'edit_url') {
        sessionManager.setState(userId, sessionManager.STATES.EDITING_URL);
        await bot.editMessageText(
          '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL:',
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚è© –£–¥–∞–ª–∏—Ç—å URL', callback_data: 'delete_url' }],
                [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_edit' }]
              ]
            }
          }
        );
        return;
      } else if (data === 'back_to_edit') {
        const id = sessionManager.getEditingId(userId);
        if (id) {
          const passwordRecord = await db.getPasswordById(id);
          if (passwordRecord) {
            await showEditOptions(bot, chatId, messageId, passwordRecord);
            return;
          }
        }
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        await backToMain(bot, chatId, messageId);
        return;
      } else if (data === 'delete_url') {
        sessionManager.setPasswordData(userId, { url: '' });
        sessionManager.setState(userId, sessionManager.STATES.CONFIRM_SAVE);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const passwordData = sessionManager.getPasswordData(userId);
        
        await bot.editMessageText(
          `üìù *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${passwordData.category}\n*–°–µ—Ä–≤–∏—Å:* ${passwordData.service}\n*–õ–æ–≥–∏–Ω:* ${passwordData.login}\n*–ü–∞—Ä–æ–ª—å:* \`${passwordData.password}\`\n\nURL –±—ã–ª —É–¥–∞–ª–µ–Ω. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboards.saveKeyboard()
          }
        );
        return;
      }

      const id = data.split('_')[1];
      const passwordRecord = await db.getPasswordById(id);
      
      if (passwordRecord) {
        // –î–µ—à–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const decryptedPassword = crypto.decrypt(passwordRecord.password);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        sessionManager.setPasswordData(userId, {
          category: passwordRecord.category,
          service: passwordRecord.service,
          login: passwordRecord.login,
          password: decryptedPassword,
          url: passwordRecord.url || ''
        });
        sessionManager.setEditingId(userId, id);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        await showEditOptions(bot, chatId, messageId, passwordRecord);
      }
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    else if (data.startsWith('delete_')) {
      const id = data.split('_')[1];
      const passwordRecord = await db.getPasswordById(id);
      
      if (passwordRecord) {
        await bot.editMessageText(
          `‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è *${passwordRecord.service}*?`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboards.confirmDeleteKeyboard(id, passwordRecord.category)
          }
        );
      }
    }
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    else if (data.startsWith('confirm_delete_')) {
      const id = data.split('_')[2];
      await db.deletePassword(id);
      
      await bot.editMessageText(
        '‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!',
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìÅ –ö —Å–ø–∏—Å–∫—É –ø–∞—Ä–æ–ª–µ–π', callback_data: 'view_categories' }],
              [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]
            ]
          }
        }
      );
    }
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞:', error);
    
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
      show_alert: true
    });
  }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function backToMain(bot, chatId, messageId) {
  await bot.editMessageText(
    'üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Password Manager Bot!*\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –ø–∞—Ä–æ–ª–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboards.mainMenu()
    }
  );
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–æ–ª–µ–π
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function showCategories(bot, chatId, messageId) {
  const categories = await db.getCategories();
  
  if (categories.length === 0) {
    await bot.editMessageText(
      'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–æ–ª—å!',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data: 'add_password' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        }
      }
    );
    return;
  }
  
  await bot.editMessageText(
    'üìÇ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboards.categoriesKeyboard(categories)
    }
  );
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} category - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
async function showServices(bot, chatId, messageId, category) {
  const services = await db.getServicesByCategory(category);
  
  if (services.length === 0) {
    await bot.editMessageText(
      `üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *${category}* –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data: 'add_password' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'view_categories' }]
          ]
        }
      }
    );
    return;
  }
  
  await bot.editMessageText(
    `üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:`,
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboards.servicesKeyboard(services, category)
    }
  );
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} id - ID –ø–∞—Ä–æ–ª—è
 */
async function showPasswordDetails(bot, chatId, messageId, id) {
  const passwordRecord = await db.getPasswordById(id);
  
  if (!passwordRecord) {
    await bot.editMessageText(
      '‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'view_categories' }]
          ]
        }
      }
    );
    return;
  }
  
  // –î–µ—à–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
  const decryptedPassword = crypto.decrypt(passwordRecord.password);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  await bot.deleteMessage(chatId, messageId);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ URL —É–∫–∞–∑–∞–Ω
  const urlButton = passwordRecord.url 
    ? [{ text: 'üîó –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: passwordRecord.url }] 
    : [];
  
  // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –ø–∞—Ä–æ–ª—è
  const urlText = passwordRecord.url ? `\n*URL:* ${passwordRecord.url}` : '';
  await bot.sendMessage(
    chatId,
    `üîê *–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:*\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${passwordRecord.category}\n*–°–µ—Ä–≤–∏—Å:* ${passwordRecord.service}\n*–õ–æ–≥–∏–Ω:* \`${passwordRecord.login}\`${urlText}\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–∞—Ä–æ–ª—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...`,
    {
      parse_mode: 'Markdown'
    }
  );
  
  // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
  const inlineKeyboard = [];
  if (urlButton.length > 0) {
    inlineKeyboard.push(urlButton);
  }
  inlineKeyboard.push([
    { text: 'üîÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_${id}` },
    { text: '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_${id}` }
  ]);
  inlineKeyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `category_${passwordRecord.category}` }]);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const autoDelete = require('../utils/autoDelete');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∫–∞–∫ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ (120 —Å–µ–∫—É–Ω–¥ = 2 –º–∏–Ω—É—Ç—ã)
  await autoDelete.sendSelfDestructMessage(
    bot,
    chatId,
    `üîë *–ü–∞—Ä–æ–ª—å –¥–ª—è ${passwordRecord.service}:*\n\n\`${decryptedPassword}\``,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: inlineKeyboard
      }
    },
    120, // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - 2 –º–∏–Ω—É—Ç—ã
    30    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  );
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function startAddPassword(bot, chatId, messageId, userId) {
  sessionManager.setState(userId, sessionManager.STATES.AWAITING_CATEGORY);
  sessionManager.resetPasswordData(userId);
  
  await bot.editMessageText(
    'üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è*\n\n–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ—á—Ç–∞, –ò–≥—Ä—ã, –§–∏–Ω–∞–Ω—Å—ã)',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_main' }]
        ]
      }
    }
  );
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è 
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function showPasswordGenerator(bot, chatId, messageId, userId) {
  sessionManager.setState(userId, sessionManager.STATES.GENERATOR_SETTINGS);
  
  const settings = sessionManager.getGeneratorSettings(userId);
  
  await bot.editMessageText(
    'üß† *–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π*\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è:',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: `üî¢ –î–ª–∏–Ω–∞: ${settings.length}`, callback_data: 'length_12' }],
          [
            { text: `üî† –ó–∞–≥–ª–∞–≤–Ω—ã–µ: ${settings.uppercase ? '‚úÖ' : '‚ùå'}`, callback_data: 'toggle_uppercase' },
            { text: `üî¢ –¶–∏—Ñ—Ä—ã: ${settings.numbers ? '‚úÖ' : '‚ùå'}`, callback_data: 'toggle_numbers' }
          ],
          [
            { text: `#Ô∏è‚É£ –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: ${settings.symbols ? '‚úÖ' : '‚ùå'}`, callback_data: 'toggle_symbols' }
          ],
          [{ text: 'üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'generate' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
  );
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function updatePasswordGeneratorSettings(bot, chatId, messageId, userId) {
  const settings = sessionManager.getGeneratorSettings(userId);
  
  await bot.editMessageText(
    'üß† *–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π*\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è:',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: `üî¢ –î–ª–∏–Ω–∞: ${settings.length}`, callback_data: 'length_12' }],
          [
            { text: `üî† –ó–∞–≥–ª–∞–≤–Ω—ã–µ: ${settings.uppercase ? '‚úÖ' : '‚ùå'}`, callback_data: 'toggle_uppercase' },
            { text: `üî¢ –¶–∏—Ñ—Ä—ã: ${settings.numbers ? '‚úÖ' : '‚ùå'}`, callback_data: 'toggle_numbers' }
          ],
          [
            { text: `#Ô∏è‚É£ –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: ${settings.symbols ? '‚úÖ' : '‚ùå'}`, callback_data: 'toggle_symbols' }
          ],
          [{ text: 'üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'generate' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
  );
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function showPasswordLengthOptions(bot, chatId, messageId) {
  await bot.editMessageText(
    'üî¢ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è:*',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboards.passwordLengthKeyboard()
    }
  );
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function showSettings(bot, chatId, messageId) {
  await bot.editMessageText(
    '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
  );
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
 * @param {Object} bot - –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} passwordRecord - –ó–∞–ø–∏—Å—å –æ –ø–∞—Ä–æ–ª–µ
 */
async function showEditOptions(bot, chatId, messageId, passwordRecord) {
  const urlText = passwordRecord.url ? `\n*URL:* ${passwordRecord.url}` : '';
  
  await bot.editMessageText(
    `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏*\n\n*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${passwordRecord.category}\n*–°–µ—Ä–≤–∏—Å:* ${passwordRecord.service}\n*–õ–æ–≥–∏–Ω:* ${passwordRecord.login}${urlText}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`,
    {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'edit_category' },
            { text: 'üìù –°–µ—Ä–≤–∏—Å', callback_data: 'edit_service' }
          ],
          [
            { text: 'üìù –õ–æ–≥–∏–Ω', callback_data: 'edit_login' },
            { text: 'üîë –ü–∞—Ä–æ–ª—å', callback_data: 'edit_password' }
          ],
          [
            { text: 'üîó URL', callback_data: 'edit_url' }
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `service_${passwordRecord.id}` }]
        ]
      }
    }
  );
} 